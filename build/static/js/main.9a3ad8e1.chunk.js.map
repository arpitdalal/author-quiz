{"version":3,"sources":["components/Paragraph.js","Author/Body/Body.js","Author/Header/Header.js","components/Button.js","Author/Home.js","serviceWorker.js","index.js"],"names":["Paragraph","onClick","e","props","className","this","text","React","Component","Body","onOptionClick","options","answer","target","innerText","bgColor","setState","color","answerClicked","wrongOptionClicked","state","console","log","src","imgUrl","alt","map","i","key","Header","Button","toggle","Home","btn","quesNo","questions","getOptions","updateQues","nextQuesNo","length","showButton","hideButton","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAGqBA,G,wNACnBC,QAAU,SAACC,GACT,EAAKC,MAAMF,QAAQC,I,uDAInB,OACE,uBAAGE,UAAU,SAASH,QAASI,KAAKJ,SACjCI,KAAKF,MAAMG,U,GARmBC,IAAMC,YCCxBC,E,kDACnB,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IAMRO,cAAgB,SAACR,GACX,EAAKC,MAAMQ,QAAQC,QAAUV,EAAEW,OAAOC,WACxC,EAAKC,QAAU,GACf,EAAKC,SAAS,CAAEC,MAAO,UACvB,EAAKd,MAAMe,kBAEX,EAAKH,QAAU,GACf,EAAKC,SAAS,CAAEC,MAAO,QACvB,EAAKd,MAAMgB,uBAbb,EAAKC,MAAQ,CAAEH,MAAO,WACtB,EAAKF,QAAU,EAAKZ,MAAMQ,QAAQI,QAClCM,QAAQC,IAAI,EAAKP,SAJA,E,iEAoBjBV,KAAKU,QAAUV,KAAKF,MAAMQ,QAAQI,U,+BAG1B,IAAD,OACP,OACE,yBAAKX,UAAS,eAAUC,KAAKU,QAAUV,KAAKU,QAAUV,KAAKe,MAAMH,QAC/D,yBAAKb,UAAU,SACb,yBAAKmB,IAAKlB,KAAKF,MAAMQ,QAAQa,OAAQC,IAAI,WAE3C,yBAAKrB,UAAU,WACZC,KAAKF,MAAMQ,QAAQA,QAAQe,KAAI,SAACpB,EAAMqB,GACrC,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAGrB,KAAMA,EAAML,QAAS,EAAKS,yB,GAhC9BH,IAAMC,WCQzBqB,G,MATA,WACb,OACE,yBAAKzB,UAAU,UACb,2CACA,iFCJe0B,G,6KAEjB,OACE,yBAAK1B,UAAS,cAASC,KAAKF,MAAM4B,SAChC,4BAAQ9B,QAASI,KAAKF,MAAMF,SAA5B,iB,GAJ4BM,IAAMC,YCGrBwB,E,4MACnBZ,MAAQ,CACNa,IAAK,OACLC,OAAQ,G,EAGVC,UAAY,CACV,CACExB,QAAS,CAAE,UAAW,eAAgB,oBAAqB,UAC3DC,OAAQ,eACRG,QAAS,UACTS,OACE,+GAEJ,CACEb,QAAS,CAAE,eAAgB,qCAAsC,UAAW,MAC5EC,OAAQ,qCACRG,QAAS,UACTS,OACE,0I,EAINY,WAAa,WAEX,OADAf,QAAQC,IAAI,EAAKF,MAAMc,QAChB,EAAKC,UAAU,EAAKf,MAAMc,S,EAGnCG,WAAa,WACX,IAAMC,EAAa,EAAKlB,MAAMc,OAAS,EACnCI,EAAa,EAAKH,UAAUI,OAC9B,EAAKvB,SAAS,CAAEkB,OAAQI,EAAYL,IAAK,SAEzC,EAAKjB,SAAS,CAAEkB,OAAQ,EAAGD,IAAK,U,EAIpCO,WAAa,WACX,EAAKxB,SAAS,CAAEiB,IAAK,U,EAGvBQ,WAAa,WACX,EAAKzB,SAAS,CAAEiB,IAAK,U,uDAIrB,OACE,kBAAC,IAAMS,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM/B,QAASN,KAAK+B,aAAclB,cAAeb,KAAKmC,WAAYrB,mBAAoBd,KAAKoC,aAC3F,kBAAC,EAAD,CAAQxC,QAASI,KAAKgC,WAAYN,OAAQ1B,KAAKe,MAAMa,W,GAlD3B1B,IAAMC,WCMpBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.9a3ad8e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Paragraph.css';\r\n\r\nexport default class Paragraph extends React.Component {\r\n  onClick = (e) => {\r\n    this.props.onClick(e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <p className='option' onClick={this.onClick}>\r\n        {this.props.text}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Body.css';\r\nimport Paragraph from '../../components/Paragraph';\r\n\r\nexport default class Body extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { color: 'nothing' };\r\n    this.bgColor = this.props.options.bgColor;\r\n    console.log(this.bgColor);\r\n  }\r\n\r\n  onOptionClick = (e) => {\r\n    if (this.props.options.answer == e.target.innerText) {\r\n      this.bgColor = '';\r\n      this.setState({ color: 'green' });\r\n      this.props.answerClicked();\r\n    } else {\r\n      this.bgColor = '';\r\n      this.setState({ color: 'red' });\r\n      this.props.wrongOptionClicked();\r\n    }\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    this.bgColor = this.props.options.bgColor;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`body ${this.bgColor ? this.bgColor : this.state.color}`}>\r\n        <div className='image'>\r\n          <img src={this.props.options.imgUrl} alt='robot' />\r\n        </div>\r\n        <div className='options'>\r\n          {this.props.options.options.map((text, i) => {\r\n            return <Paragraph key={i} text={text} onClick={this.onOptionClick} />;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className='header'>\r\n      <h2>Author Quiz</h2>\r\n      <small>Select the book written by the author shown</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\nexport default class Button extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={`btn ${this.props.toggle}`}>\r\n        <button onClick={this.props.onClick}>Continue</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Body from './Body/Body';\r\nimport Header from './Header/Header';\r\nimport Button from '../components/Button';\r\n\r\nexport default class Home extends React.Component {\r\n  state = {\r\n    btn: 'hide',\r\n    quesNo: 0\r\n  };\r\n\r\n  questions = [\r\n    {\r\n      options: [ 'MacBeth', 'The Shinning', 'Heart of Darkness', 'Hamlet' ],\r\n      answer: 'The Shinning',\r\n      bgColor: 'nothing',\r\n      imgUrl:\r\n        'https://images.unsplash.com/photo-1531837763904-5d3cb2632ea3?ixlib=rb-1.2.1&auto=format&fit=crop&w=250&q=80'\r\n    },\r\n    {\r\n      options: [ 'The Shinning', 'The Adventures of Huckleberry Finn', 'MacBeth', 'IT' ],\r\n      answer: 'The Adventures of Huckleberry Finn',\r\n      bgColor: 'nothing',\r\n      imgUrl:\r\n        'https://images.unsplash.com/photo-1485827404703-89b55fcc595e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=250&q=60'\r\n    }\r\n  ];\r\n\r\n  getOptions = () => {\r\n    console.log(this.state.quesNo);\r\n    return this.questions[this.state.quesNo];\r\n  };\r\n\r\n  updateQues = () => {\r\n    const nextQuesNo = this.state.quesNo + 1;\r\n    if (nextQuesNo < this.questions.length) {\r\n      this.setState({ quesNo: nextQuesNo, btn: 'hide' });\r\n    } else {\r\n      this.setState({ quesNo: 0, btn: 'hide' });\r\n    }\r\n  };\r\n\r\n  showButton = () => {\r\n    this.setState({ btn: 'show' });\r\n  };\r\n\r\n  hideButton = () => {\r\n    this.setState({ btn: 'hide' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <Body options={this.getOptions()} answerClicked={this.showButton} wrongOptionClicked={this.hideButton} />\r\n        <Button onClick={this.updateQues} toggle={this.state.btn} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Author/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}